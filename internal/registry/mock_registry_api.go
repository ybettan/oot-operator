// Code generated by MockGen. DO NOT EDIT.
// Source: registry.go

// Package registry is a generated GoMock package.
package registry

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/google/go-containerregistry/pkg/v1"
	v1alpha1 "github.com/qbarrand/oot-operator/api/v1alpha1"
	v10 "k8s.io/api/core/v1"
)

// MockRegistry is a mock of Registry interface.
type MockRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryMockRecorder
}

// MockRegistryMockRecorder is the mock recorder for MockRegistry.
type MockRegistryMockRecorder struct {
	mock *MockRegistry
}

// NewMockRegistry creates a new mock instance.
func NewMockRegistry(ctrl *gomock.Controller) *MockRegistry {
	mock := &MockRegistry{ctrl: ctrl}
	mock.recorder = &MockRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistry) EXPECT() *MockRegistryMockRecorder {
	return m.recorder
}

// ExtractToolkitRelease mocks base method.
func (m *MockRegistry) ExtractToolkitRelease(arg0 v1.Layer) (*DriverToolkitEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractToolkitRelease", arg0)
	ret0, _ := ret[0].(*DriverToolkitEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractToolkitRelease indicates an expected call of ExtractToolkitRelease.
func (mr *MockRegistryMockRecorder) ExtractToolkitRelease(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractToolkitRelease", reflect.TypeOf((*MockRegistry)(nil).ExtractToolkitRelease), arg0)
}

// GetLayerByDigest mocks base method.
func (m *MockRegistry) GetLayerByDigest(digest string, pullConfig *RepoPullConfig) (v1.Layer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLayerByDigest", digest, pullConfig)
	ret0, _ := ret[0].(v1.Layer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLayerByDigest indicates an expected call of GetLayerByDigest.
func (mr *MockRegistryMockRecorder) GetLayerByDigest(digest, pullConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLayerByDigest", reflect.TypeOf((*MockRegistry)(nil).GetLayerByDigest), digest, pullConfig)
}

// GetLayersDigests mocks base method.
func (m *MockRegistry) GetLayersDigests(ctx context.Context, image string) ([]string, *RepoPullConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLayersDigests", ctx, image)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*RepoPullConfig)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLayersDigests indicates an expected call of GetLayersDigests.
func (mr *MockRegistryMockRecorder) GetLayersDigests(ctx, image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLayersDigests", reflect.TypeOf((*MockRegistry)(nil).GetLayersDigests), ctx, image)
}

// ImageExists mocks base method.
func (m *MockRegistry) ImageExists(ctx context.Context, image string, po v1alpha1.PullOptions, ps *v10.LocalObjectReference, psNamespace string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageExists", ctx, image, po, ps, psNamespace)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageExists indicates an expected call of ImageExists.
func (mr *MockRegistryMockRecorder) ImageExists(ctx, image, po, ps, psNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageExists", reflect.TypeOf((*MockRegistry)(nil).ImageExists), ctx, image, po, ps, psNamespace)
}
